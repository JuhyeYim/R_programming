#The first function, makeVector creates a special "vector", which is really a list containing a function to

#1. set the value of the vector
#2. get the value of the vector
#3. set the value of the mean
#4. get the value of the mean
#makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.

makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL
  set <- function(y) {
    x <<- y
    inv <<- NULL
  }
  get <- function() x
  setInverse <- function(inverse) inv <<- inverse
  getInverse <- function() inv
  list(set = set,
       get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}

#cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
  
  inv <- x$getInverse()
  if(!is.null(inv)){
    message("getting cached data")
    return(inv)
  }
  data <- x$get()
  inv <- solve(data)
  x$setInverse(inv)
  inv      
}

#Run it
> makeCacheMatrix <- function(x = matrix()) {
+   inv <- NULL
+   set <- function(y) {
+     x <<- y
+     inv <<- NULL
+   }
+   get <- function() x
+   setInverse <- function(inverse) inv <<- inverse
+   getInverse <- function() inv
+   list(set = set,
+        get = get,
+        setInverse = setInverse,
+        getInverse = getInverse)
+ }
> cacheSolve <- function(x, ...) {
+   
+   inv <- x$getInverse()
+   if(!is.null(inv)){
+     message("getting cached data")
+     return(inv)
+   }
+   data <- x$get()
+   inv <- solve(data)
+   x$setInverse(inv)
+   inv      
+ }

#To use the source which was saved as "Assignment2.R"
> source("Assignment2.R")

#Make Data with using nco and nrow
> A <- makeCacheMatrix(matrix(c(1,0,2,1), ncol=2, nrow=2))
> cacheSolve(A)
     [,1] [,2]
[1,]    1   -2
[2,]    0    1
> A$get()
     [,1] [,2]
[1,]    1    2
[2,]    0    1

#To get the Inverse of A
> A$getInverse()
     [,1] [,2]
[1,]    1   -2
[2,]    0    1
